# Generated by Django 5.2.4 on 2025-07-28 14:55

import apps.accounts.helper_func
import apps.accounts.validators
import django.contrib.auth.models
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False, unique=True, verbose_name='ID')),
                ('username', models.CharField(error_messages={'max_length': 'Username is too long, Max - 30.', 'unique': 'Username is not available.'}, help_text='a-Z, 0-9, underscore & hypen.', max_length=30, unique=True, validators=[apps.accounts.validators.username_validator], verbose_name='Username')),
                ('email', models.EmailField(error_messages={'unique': 'An account is already registered with this Email Id.'}, max_length=254, unique=True, validators=[django.core.validators.EmailValidator], verbose_name='Email Id')),
                ('name', models.CharField(blank=True, max_length=150, null=True, verbose_name='Name')),
                ('profile_image', models.ImageField(blank=True, null=True, upload_to=apps.accounts.helper_func.get_profile_image_path, validators=[apps.accounts.validators.profile_image_validator], verbose_name='Profile Image')),
                ('bio', models.TextField(max_length=3000, verbose_name='Bio')),
                ('followers_count', models.PositiveIntegerField(default=0, verbose_name='Followers')),
                ('followings_count', models.PositiveIntegerField(default=0, verbose_name='Followings')),
                ('is_verified', models.BooleanField(default=False, verbose_name='Is Verified?')),
                ('is_banned', models.BooleanField(default=False, verbose_name='Is Banned?')),
                ('uuid', models.UUIDField(blank=True, null=True, unique=True, verbose_name='UUID')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'ordering': ['-date_joined'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='UserFollow',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False, unique=True, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('follower', models.ForeignKey(help_text='User that follows.', on_delete=django.db.models.deletion.CASCADE, related_name='followings', to=settings.AUTH_USER_MODEL, verbose_name='Follower')),
                ('following', models.ForeignKey(help_text='User that being Followed.', on_delete=django.db.models.deletion.CASCADE, related_name='followers', to=settings.AUTH_USER_MODEL, verbose_name='Following')),
            ],
            options={
                'verbose_name': 'User Follow',
                'verbose_name_plural': 'User Follows',
                'ordering': ['-created_at'],
                'unique_together': {('follower', 'following')},
            },
        ),
    ]
