# Generated by Django 5.2.4 on 2025-07-28 14:55

import apps.posts.helper_func
import apps.posts.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False, unique=True, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Name')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
            ],
            options={
                'verbose_name': 'Tag',
                'verbose_name_plural': 'Tags',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False, unique=True, verbose_name='ID')),
                ('title', models.CharField(error_messages={'max_length': 'Title is too long, Max Lengh is 160.'}, max_length=160, verbose_name='Title')),
                ('slug', models.SlugField(max_length=165, unique=True, verbose_name='Slug')),
                ('content', models.TextField(verbose_name='Content')),
                ('table_of_content', models.TextField(verbose_name='Table Of Content')),
                ('thumbnail', models.ImageField(blank=True, null=True, upload_to=apps.posts.helper_func.get_post_thumbnail_path, validators=[apps.posts.validators.post_thumbnail_validator], verbose_name='Post Thumbnail')),
                ('read_time', models.DurationField(blank=True, null=True, verbose_name='Read Time')),
                ('likes_count', models.PositiveIntegerField(default=0, verbose_name='Likes')),
                ('comments_count', models.PositiveIntegerField(default=0, verbose_name='Comments')),
                ('is_private', models.BooleanField(default=True, verbose_name='Is Private?')),
                ('is_banned', models.BooleanField(default=False, verbose_name='Is Banned?')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(verbose_name='Updated At')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='posts', to=settings.AUTH_USER_MODEL, verbose_name='Author')),
            ],
            options={
                'verbose_name': 'Post',
                'verbose_name_plural': 'Posts',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PostImage',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False, unique=True, verbose_name='ID')),
                ('image', models.ImageField(blank=True, null=True, upload_to=apps.posts.helper_func.get_post_image_path, validators=[apps.posts.validators.post_image_validator], verbose_name='Post Image')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='post_images', to='posts.post', verbose_name='Post')),
            ],
            options={
                'verbose_name': 'Post Image',
                'verbose_name_plural': 'Post Images',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PostView',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False, unique=True, verbose_name='ID')),
                ('ip_address', models.GenericIPAddressField(verbose_name='IP Address')),
                ('user_agent', models.TextField(verbose_name='User-Agent')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='views', to='posts.post', verbose_name='Post')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='viewed_posts', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Post View',
                'verbose_name_plural': 'Post Views',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PostTag',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False, unique=True, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='post_tags', to='posts.post', verbose_name='Post')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tag_posts', to='posts.tag', verbose_name='Tag')),
            ],
            options={
                'verbose_name': 'Post Tag',
                'verbose_name_plural': 'Post Tags',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddField(
            model_name='post',
            name='tags',
            field=models.ManyToManyField(through='posts.PostTag', to='posts.tag', verbose_name='Tags'),
        ),
        migrations.CreateModel(
            name='PostLike',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False, unique=True, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='likes', to='posts.post', verbose_name='Post')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='liked_posts', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Post Like',
                'verbose_name_plural': 'Post Likes',
                'ordering': ['-created_at'],
                'unique_together': {('user', 'post')},
            },
        ),
    ]
